// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package game

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame(in *jlexer.Lexer, out *WordHint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "character":
			out.Character = int32(in.Int32())
		case "underline":
			out.Underline = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame(out *jwriter.Writer, in WordHint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"character\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Character))
	}
	{
		const prefix string = ",\"underline\":"
		out.RawString(prefix)
		out.Bool(bool(in.Underline))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WordHint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WordHint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WordHint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WordHint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame1(in *jlexer.Lexer, out *StringDataEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame1(out *jwriter.Writer, in StringDataEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StringDataEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StringDataEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StringDataEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StringDataEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame1(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame2(in *jlexer.Lexer, out *ReadyEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wordHints":
			if in.IsNull() {
				in.Skip()
				out.WordHints = nil
			} else {
				in.Delim('[')
				if out.WordHints == nil {
					if !in.IsDelim(']') {
						out.WordHints = make([]*WordHint, 0, 8)
					} else {
						out.WordHints = []*WordHint{}
					}
				} else {
					out.WordHints = (out.WordHints)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *WordHint
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(WordHint)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.WordHints = append(out.WordHints, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playerName":
			out.PlayerName = string(in.String())
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]*Player, 0, 8)
					} else {
						out.Players = []*Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *Player
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Player)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Players = append(out.Players, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gameState":
			out.GameState = State(in.String())
		case "currentDrawing":
			if in.IsNull() {
				in.Skip()
				out.CurrentDrawing = nil
			} else {
				in.Delim('[')
				if out.CurrentDrawing == nil {
					if !in.IsDelim(']') {
						out.CurrentDrawing = make([]interface{}, 0, 4)
					} else {
						out.CurrentDrawing = []interface{}{}
					}
				} else {
					out.CurrentDrawing = (out.CurrentDrawing)[:0]
				}
				for !in.IsDelim(']') {
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					out.CurrentDrawing = append(out.CurrentDrawing, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playerId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PlayerID).UnmarshalText(data))
			}
		case "ownerId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OwnerID).UnmarshalText(data))
			}
		case "round":
			out.Round = int(in.Int())
		case "rounds":
			out.Rounds = int(in.Int())
		case "roundEndTime":
			out.RoundEndTime = int(in.Int())
		case "drawingTimeSetting":
			out.DrawingTimeSetting = int(in.Int())
		case "allowDrawing":
			out.AllowDrawing = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame2(out *jwriter.Writer, in ReadyEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wordHints\":"
		out.RawString(prefix[1:])
		if in.WordHints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.WordHints {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"playerName\":"
		out.RawString(prefix)
		out.String(string(in.PlayerName))
	}
	{
		const prefix string = ",\"players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Players {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"gameState\":"
		out.RawString(prefix)
		out.String(string(in.GameState))
	}
	{
		const prefix string = ",\"currentDrawing\":"
		out.RawString(prefix)
		if in.CurrentDrawing == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.CurrentDrawing {
				if v8 > 0 {
					out.RawByte(',')
				}
				if m, ok := v9.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"playerId\":"
		out.RawString(prefix)
		out.RawText((in.PlayerID).MarshalText())
	}
	{
		const prefix string = ",\"ownerId\":"
		out.RawString(prefix)
		out.RawText((in.OwnerID).MarshalText())
	}
	{
		const prefix string = ",\"round\":"
		out.RawString(prefix)
		out.Int(int(in.Round))
	}
	{
		const prefix string = ",\"rounds\":"
		out.RawString(prefix)
		out.Int(int(in.Rounds))
	}
	{
		const prefix string = ",\"roundEndTime\":"
		out.RawString(prefix)
		out.Int(int(in.RoundEndTime))
	}
	{
		const prefix string = ",\"drawingTimeSetting\":"
		out.RawString(prefix)
		out.Int(int(in.DrawingTimeSetting))
	}
	{
		const prefix string = ",\"allowDrawing\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowDrawing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadyEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadyEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadyEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadyEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame2(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame3(in *jlexer.Lexer, out *RGBColor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "r":
			out.R = uint8(in.Uint8())
		case "g":
			out.G = uint8(in.Uint8())
		case "b":
			out.B = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame3(out *jwriter.Writer, in RGBColor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.R))
	}
	{
		const prefix string = ",\"g\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.G))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.B))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RGBColor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RGBColor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RGBColor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RGBColor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame3(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame4(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "state":
			out.State = PlayerState(in.String())
		case "spectateToggleRequested":
			out.SpectateToggleRequested = bool(in.Bool())
		case "score":
			out.Score = int(in.Int())
		case "lastScore":
			out.LastScore = int(in.Int())
		case "rank":
			out.Rank = int(in.Int())
		case "connected":
			out.Connected = bool(in.Bool())
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame4(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"spectateToggleRequested\":"
		out.RawString(prefix)
		out.Bool(bool(in.SpectateToggleRequested))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"lastScore\":"
		out.RawString(prefix)
		out.Int(int(in.LastScore))
	}
	{
		const prefix string = ",\"rank\":"
		out.RawString(prefix)
		out.Int(int(in.Rank))
	}
	{
		const prefix string = ",\"connected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Connected))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.RawText((in.ID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame4(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame5(in *jlexer.Lexer, out *OwnerChangeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playerName":
			out.PlayerName = string(in.String())
		case "playerId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PlayerID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame5(out *jwriter.Writer, in OwnerChangeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playerName\":"
		out.RawString(prefix[1:])
		out.String(string(in.PlayerName))
	}
	{
		const prefix string = ",\"playerId\":"
		out.RawString(prefix)
		out.RawText((in.PlayerID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OwnerChangeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OwnerChangeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OwnerChangeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OwnerChangeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame5(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame6(in *jlexer.Lexer, out *OutgoingMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			out.Content = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "authorId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AuthorID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame6(out *jwriter.Writer, in OutgoingMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"authorId\":"
		out.RawString(prefix)
		out.RawText((in.AuthorID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutgoingMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutgoingMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutgoingMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutgoingMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame6(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame7(in *jlexer.Lexer, out *NextTurn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "previousWord":
			out.PreviousWord = string(in.String())
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]*Player, 0, 8)
					} else {
						out.Players = []*Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Player
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Player)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Players = append(out.Players, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "round":
			out.Round = int(in.Int())
		case "roundEndTime":
			out.RoundEndTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame7(out *jwriter.Writer, in NextTurn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"previousWord\":"
		out.RawString(prefix[1:])
		out.String(string(in.PreviousWord))
	}
	{
		const prefix string = ",\"players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Players {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"round\":"
		out.RawString(prefix)
		out.Int(int(in.Round))
	}
	{
		const prefix string = ",\"roundEndTime\":"
		out.RawString(prefix)
		out.Int(int(in.RoundEndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NextTurn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NextTurn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NextTurn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NextTurn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame7(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame8(in *jlexer.Lexer, out *NameChangeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playerName":
			out.PlayerName = string(in.String())
		case "playerId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PlayerID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame8(out *jwriter.Writer, in NameChangeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playerName\":"
		out.RawString(prefix[1:])
		out.String(string(in.PlayerName))
	}
	{
		const prefix string = ",\"playerId\":"
		out.RawString(prefix)
		out.RawText((in.PlayerID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NameChangeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NameChangeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NameChangeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NameChangeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame8(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame9(in *jlexer.Lexer, out *LineEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "data":
			easyjson9aa6bd57Decode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame9(out *jwriter.Writer, in LineEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson9aa6bd57Encode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LineEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LineEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LineEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LineEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame9(l, v)
}
func easyjson9aa6bd57Decode(in *jlexer.Lexer, out *struct {
	FromX     float32  `json:"fromX"`
	FromY     float32  `json:"fromY"`
	ToX       float32  `json:"toX"`
	ToY       float32  `json:"toY"`
	Color     RGBColor `json:"color"`
	LineWidth float32  `json:"lineWidth"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fromX":
			out.FromX = float32(in.Float32())
		case "fromY":
			out.FromY = float32(in.Float32())
		case "toX":
			out.ToX = float32(in.Float32())
		case "toY":
			out.ToY = float32(in.Float32())
		case "color":
			(out.Color).UnmarshalEasyJSON(in)
		case "lineWidth":
			out.LineWidth = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57Encode(out *jwriter.Writer, in struct {
	FromX     float32  `json:"fromX"`
	FromY     float32  `json:"fromY"`
	ToX       float32  `json:"toX"`
	ToY       float32  `json:"toY"`
	Color     RGBColor `json:"color"`
	LineWidth float32  `json:"lineWidth"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fromX\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.FromX))
	}
	{
		const prefix string = ",\"fromY\":"
		out.RawString(prefix)
		out.Float32(float32(in.FromY))
	}
	{
		const prefix string = ",\"toX\":"
		out.RawString(prefix)
		out.Float32(float32(in.ToX))
	}
	{
		const prefix string = ",\"toY\":"
		out.RawString(prefix)
		out.Float32(float32(in.ToY))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		(in.Color).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"lineWidth\":"
		out.RawString(prefix)
		out.Float32(float32(in.LineWidth))
	}
	out.RawByte('}')
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame10(in *jlexer.Lexer, out *KickVote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playerName":
			out.PlayerName = string(in.String())
		case "playerId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PlayerID).UnmarshalText(data))
			}
		case "voteCount":
			out.VoteCount = int(in.Int())
		case "requiredVoteCount":
			out.RequiredVoteCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame10(out *jwriter.Writer, in KickVote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playerName\":"
		out.RawString(prefix[1:])
		out.String(string(in.PlayerName))
	}
	{
		const prefix string = ",\"playerId\":"
		out.RawString(prefix)
		out.RawText((in.PlayerID).MarshalText())
	}
	{
		const prefix string = ",\"voteCount\":"
		out.RawString(prefix)
		out.Int(int(in.VoteCount))
	}
	{
		const prefix string = ",\"requiredVoteCount\":"
		out.RawString(prefix)
		out.Int(int(in.RequiredVoteCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KickVote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KickVote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KickVote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KickVote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame10(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame11(in *jlexer.Lexer, out *IntDataEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame11(out *jwriter.Writer, in IntDataEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IntDataEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IntDataEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IntDataEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IntDataEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame11(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame12(in *jlexer.Lexer, out *GameOverEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ReadyEvent = new(ReadyEvent)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "previousWord":
			out.PreviousWord = string(in.String())
		case "wordHints":
			if in.IsNull() {
				in.Skip()
				out.WordHints = nil
			} else {
				in.Delim('[')
				if out.WordHints == nil {
					if !in.IsDelim(']') {
						out.WordHints = make([]*WordHint, 0, 8)
					} else {
						out.WordHints = []*WordHint{}
					}
				} else {
					out.WordHints = (out.WordHints)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *WordHint
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(WordHint)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.WordHints = append(out.WordHints, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playerName":
			out.PlayerName = string(in.String())
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]*Player, 0, 8)
					} else {
						out.Players = []*Player{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *Player
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(Player)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					out.Players = append(out.Players, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gameState":
			out.GameState = State(in.String())
		case "currentDrawing":
			if in.IsNull() {
				in.Skip()
				out.CurrentDrawing = nil
			} else {
				in.Delim('[')
				if out.CurrentDrawing == nil {
					if !in.IsDelim(']') {
						out.CurrentDrawing = make([]interface{}, 0, 4)
					} else {
						out.CurrentDrawing = []interface{}{}
					}
				} else {
					out.CurrentDrawing = (out.CurrentDrawing)[:0]
				}
				for !in.IsDelim(']') {
					var v15 interface{}
					if m, ok := v15.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v15.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v15 = in.Interface()
					}
					out.CurrentDrawing = append(out.CurrentDrawing, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playerId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PlayerID).UnmarshalText(data))
			}
		case "ownerId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OwnerID).UnmarshalText(data))
			}
		case "round":
			out.Round = int(in.Int())
		case "rounds":
			out.Rounds = int(in.Int())
		case "roundEndTime":
			out.RoundEndTime = int(in.Int())
		case "drawingTimeSetting":
			out.DrawingTimeSetting = int(in.Int())
		case "allowDrawing":
			out.AllowDrawing = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame12(out *jwriter.Writer, in GameOverEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"previousWord\":"
		out.RawString(prefix[1:])
		out.String(string(in.PreviousWord))
	}
	{
		const prefix string = ",\"wordHints\":"
		out.RawString(prefix)
		if in.WordHints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.WordHints {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					(*v17).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"playerName\":"
		out.RawString(prefix)
		out.String(string(in.PlayerName))
	}
	{
		const prefix string = ",\"players\":"
		out.RawString(prefix)
		if in.Players == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Players {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					(*v19).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"gameState\":"
		out.RawString(prefix)
		out.String(string(in.GameState))
	}
	{
		const prefix string = ",\"currentDrawing\":"
		out.RawString(prefix)
		if in.CurrentDrawing == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.CurrentDrawing {
				if v20 > 0 {
					out.RawByte(',')
				}
				if m, ok := v21.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v21.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v21))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"playerId\":"
		out.RawString(prefix)
		out.RawText((in.PlayerID).MarshalText())
	}
	{
		const prefix string = ",\"ownerId\":"
		out.RawString(prefix)
		out.RawText((in.OwnerID).MarshalText())
	}
	{
		const prefix string = ",\"round\":"
		out.RawString(prefix)
		out.Int(int(in.Round))
	}
	{
		const prefix string = ",\"rounds\":"
		out.RawString(prefix)
		out.Int(int(in.Rounds))
	}
	{
		const prefix string = ",\"roundEndTime\":"
		out.RawString(prefix)
		out.Int(int(in.RoundEndTime))
	}
	{
		const prefix string = ",\"drawingTimeSetting\":"
		out.RawString(prefix)
		out.Int(int(in.DrawingTimeSetting))
	}
	{
		const prefix string = ",\"allowDrawing\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowDrawing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameOverEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameOverEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameOverEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameOverEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame12(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame13(in *jlexer.Lexer, out *FillEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(struct {
						X     float32  `json:"x"`
						Y     float32  `json:"y"`
						Color RGBColor `json:"color"`
					})
				}
				easyjson9aa6bd57Decode1(in, out.Data)
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame13(out *jwriter.Writer, in FillEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil {
			out.RawString("null")
		} else {
			easyjson9aa6bd57Encode1(out, *in.Data)
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FillEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FillEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FillEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FillEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame13(l, v)
}
func easyjson9aa6bd57Decode1(in *jlexer.Lexer, out *struct {
	X     float32  `json:"x"`
	Y     float32  `json:"y"`
	Color RGBColor `json:"color"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = float32(in.Float32())
		case "y":
			out.Y = float32(in.Float32())
		case "color":
			(out.Color).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57Encode1(out *jwriter.Writer, in struct {
	X     float32  `json:"x"`
	Y     float32  `json:"y"`
	Color RGBColor `json:"color"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		(in.Color).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame14(in *jlexer.Lexer, out *EventTypeOnly) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame14(out *jwriter.Writer, in EventTypeOnly) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventTypeOnly) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventTypeOnly) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventTypeOnly) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventTypeOnly) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame14(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame15(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame15(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame15(l, v)
}
func easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame16(in *jlexer.Lexer, out *EditableLobbySettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public":
			out.Public = bool(in.Bool())
		case "maxPlayers":
			out.MaxPlayers = int(in.Int())
		case "customWordsPerTurn":
			out.CustomWordsPerTurn = int(in.Int())
		case "clientsPerIpLimit":
			out.ClientsPerIPLimit = int(in.Int())
		case "rounds":
			out.Rounds = int(in.Int())
		case "drawingTime":
			out.DrawingTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame16(out *jwriter.Writer, in EditableLobbySettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"maxPlayers\":"
		out.RawString(prefix)
		out.Int(int(in.MaxPlayers))
	}
	{
		const prefix string = ",\"customWordsPerTurn\":"
		out.RawString(prefix)
		out.Int(int(in.CustomWordsPerTurn))
	}
	{
		const prefix string = ",\"clientsPerIpLimit\":"
		out.RawString(prefix)
		out.Int(int(in.ClientsPerIPLimit))
	}
	{
		const prefix string = ",\"rounds\":"
		out.RawString(prefix)
		out.Int(int(in.Rounds))
	}
	{
		const prefix string = ",\"drawingTime\":"
		out.RawString(prefix)
		out.Int(int(in.DrawingTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditableLobbySettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditableLobbySettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9aa6bd57EncodeGithubComScribbleRsScribbleRsInternalGame16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditableLobbySettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditableLobbySettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9aa6bd57DecodeGithubComScribbleRsScribbleRsInternalGame16(l, v)
}
